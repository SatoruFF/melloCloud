// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define User data model
model User {
  id           Int          @id @default(autoincrement())
  userName     String?
  email        String       @unique
  password     String
  storageGuid  String       @unique
  diskSpace    BigInt       @default(104857600)
  usedSpace    BigInt       @default(0)
  avatar       String?
  role         String       @default("USER")
  files        File[]
  isActivated  Boolean      @default(false)
  // activationToken String?
  refreshToken String?
  userConfigs  UserConfig[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Invite       Invite[]
  
  // Обратная связь для сообщений
  sentMessages Message[]    // Все сообщения, отправленные пользователем

  // Обратная связь для чатов
  chats        ChatUser[]   // Все чаты, в которых участвует пользователь

  // Обратная связь для заметок
  notes        Note[]       // Все заметки, принадлежащие пользователю

  // Обратная связь для задач
  todos        Task[]       // Все задачи, созданные пользователем
  assignedTasks Task[]      @relation("AssignedTasks") // Все задачи, назначенные пользователю
  
  // Обратная связь для колонок канбана
  columns      TaskColumn[]     // Все колонки канбана пользователя
}

model UserConfig {
  id        Int      @id @default(autoincrement())
  language  String?  @default("ENG")
  theme     String?  @default("DARK")
  userId    Int
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define Invite data model
model Invite {
  id              Int      @id @default(autoincrement())
  userName        String?
  email           String   @unique
  password        String
  activationToken String   @unique
  isUsed          Boolean  @default(false)
  user            User?    @relation(fields: [userId], references: [id])
  userId          Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Define File data model
model File {
  id         Int       @id @default(autoincrement())
  name       String
  type       String?
  accessLink String?
  size       Int?      @default(0)
  path       String?   @default("")
  url        String?   @default("")
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int
  parent     File?     @relation("ChildToParent", fields: [parentId], references: [id])
  parentId   Int?
  childs     File[]    @relation("ChildToParent")
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

// Define Chat data model
model Chat {
  id         Int        @id @default(autoincrement())
  title      String?    // Название чата (только для групповых), либо последнее сообщение
  isGroup    Boolean    @default(false) // Флаг группового чата
  users      ChatUser[] // Пользователи в чате
  messages   Message[]  // Сообщения в чате
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

// Промежуточная таблица для связи многие-ко-многим (User <-> Chat)
model ChatUser {
  id        Int      @id @default(autoincrement())
  userId    Int
  chatId    Int
  user      User     @relation(fields: [userId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
  joinedAt  DateTime @default(now())
}

// Define Message data model
model Message {
  id        Int      @id @default(autoincrement())
  text      String
  senderId  Int
  chatId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
}

// Define Note data model
model Note {
  id        Int      @id @default(autoincrement())
  title     String   // Заголовок заметки
  content   String   // Содержание заметки
  userId    Int      // Ссылка на пользователя
  user      User     @relation(fields: [userId], references: [id]) // Связь с пользователем
  createdAt DateTime @default(now()) // Дата создания
  updatedAt DateTime @updatedAt // Дата обновления
}

// Define Column data model for Kanban
model TaskColumn {
  id        Int      @id @default(autoincrement())
  title     String   // Название колонки
  color     String   // Цвет колонки
  order     Int      // Порядок колонки
  userId    Int      // Ссылка на пользователя
  user      User     @relation(fields: [userId], references: [id]) // Связь с пользователем
  tasks     Task[]   // Задачи в этой колонке
  createdAt DateTime @default(now()) // Дата создания
  updatedAt DateTime @updatedAt // Дата обновления
}

// Define Task data model
model Task {
  id          Int      @id @default(autoincrement())
  title       String   // Название задачи
  content     String   // Содержание задачи
  description String?  // Более подробное описание задачи
  category    String?  // Категория задачи (например, "Работа", "Личное", "Учеба")
  tag         String?  // Тег для дополнительной категоризации
  priority    String   @default("LOW") // Приоритет задачи (LOW, MEDIUM, HIGH)
  status      String   @default("TODO") // Статус задачи (TODO, IN_PROGRESS, ON_HOLD, COMPLETED, CANCELLED)
  isDone      Boolean  @default(false) // Статус выполнения задачи (оставляем для обратной совместимости)
  dueDate     DateTime? // Срок выполнения задачи (необязательно)
  
  // Связь с колонкой канбана
  columnId    Int?     // ID колонки канбана (может быть null для обычных задач)
  column      TaskColumn?  @relation(fields: [columnId], references: [id], onDelete: SetNull)
  
  // Связи с пользователями
  userId      Int      // Создатель задачи
  user        User     @relation(fields: [userId], references: [id]) // Связь с создателем
  
  assignedToId Int?    // Пользователь, которому назначена задача (может быть null)
  assignedTo   User?   @relation("AssignedTasks", fields: [assignedToId], references: [id]) // Связь с исполнителем
  
  // Иерархия задач (подзадачи)
  parentTaskId Int?    // Родительская задача
  parentTask   Task?   @relation("SubTasks", fields: [parentTaskId], references: [id])
  subTasks     Task[]  @relation("SubTasks") // Подзадачи
  
  createdAt   DateTime @default(now()) // Дата создания
  updatedAt   DateTime @updatedAt // Дата обновления
}